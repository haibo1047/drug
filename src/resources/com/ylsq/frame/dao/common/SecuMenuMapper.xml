<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ylsq.frame.dao.common.SecuMenuMapper" >
  <resultMap id="BaseResultMap" type="com.ylsq.frame.model.common.SecuMenu" >
    <id column="ID" property="id" jdbcType="BIGINT" />
    <result column="MENU_NAME" property="menuName" jdbcType="VARCHAR" />
    <result column="MENU_ORDER" property="menuOrder" jdbcType="VARCHAR" />
    <result column="MENU_PATH" property="menuPath" jdbcType="VARCHAR" />
    <result column="MENU_URL" property="menuUrl" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, MENU_NAME, MENU_ORDER, MENU_PATH, MENU_URL
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.ylsq.frame.model.common.SecuMenuExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from secu_menu
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from secu_menu
    where ID = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from secu_menu
    where ID = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.ylsq.frame.model.common.SecuMenuExample" >
    delete from secu_menu
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ylsq.frame.model.common.SecuMenu" >
    insert into secu_menu (ID, MENU_NAME, MENU_ORDER, 
      MENU_PATH, MENU_URL)
    values (#{id,jdbcType=BIGINT}, #{menuName,jdbcType=VARCHAR}, #{menuOrder,jdbcType=VARCHAR}, 
      #{menuPath,jdbcType=VARCHAR}, #{menuUrl,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.ylsq.frame.model.common.SecuMenu" >
    insert into secu_menu
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="menuName != null" >
        MENU_NAME,
      </if>
      <if test="menuOrder != null" >
        MENU_ORDER,
      </if>
      <if test="menuPath != null" >
        MENU_PATH,
      </if>
      <if test="menuUrl != null" >
        MENU_URL,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="menuName != null" >
        #{menuName,jdbcType=VARCHAR},
      </if>
      <if test="menuOrder != null" >
        #{menuOrder,jdbcType=VARCHAR},
      </if>
      <if test="menuPath != null" >
        #{menuPath,jdbcType=VARCHAR},
      </if>
      <if test="menuUrl != null" >
        #{menuUrl,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ylsq.frame.model.common.SecuMenuExample" resultType="java.lang.Integer" >
    select count(*) from secu_menu
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update secu_menu
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.menuName != null" >
        MENU_NAME = #{record.menuName,jdbcType=VARCHAR},
      </if>
      <if test="record.menuOrder != null" >
        MENU_ORDER = #{record.menuOrder,jdbcType=VARCHAR},
      </if>
      <if test="record.menuPath != null" >
        MENU_PATH = #{record.menuPath,jdbcType=VARCHAR},
      </if>
      <if test="record.menuUrl != null" >
        MENU_URL = #{record.menuUrl,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update secu_menu
    set ID = #{record.id,jdbcType=BIGINT},
      MENU_NAME = #{record.menuName,jdbcType=VARCHAR},
      MENU_ORDER = #{record.menuOrder,jdbcType=VARCHAR},
      MENU_PATH = #{record.menuPath,jdbcType=VARCHAR},
      MENU_URL = #{record.menuUrl,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ylsq.frame.model.common.SecuMenu" >
    update secu_menu
    <set >
      <if test="menuName != null" >
        MENU_NAME = #{menuName,jdbcType=VARCHAR},
      </if>
      <if test="menuOrder != null" >
        MENU_ORDER = #{menuOrder,jdbcType=VARCHAR},
      </if>
      <if test="menuPath != null" >
        MENU_PATH = #{menuPath,jdbcType=VARCHAR},
      </if>
      <if test="menuUrl != null" >
        MENU_URL = #{menuUrl,jdbcType=VARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ylsq.frame.model.common.SecuMenu" >
    update secu_menu
    set MENU_NAME = #{menuName,jdbcType=VARCHAR},
      MENU_ORDER = #{menuOrder,jdbcType=VARCHAR},
      MENU_PATH = #{menuPath,jdbcType=VARCHAR},
      MENU_URL = #{menuUrl,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=BIGINT}
  </update>
  
  <select id="findListByUsername" parameterType="java.lang.String" resultMap="BaseResultMap">
   select 
    <include refid="Base_Column_List" />
    from secu_menu m where exists (
		select 1 from secu_role_menu rm,secu_user_role ur,secu_user u 
		where rm.menu_id=m.id and ur.role_id=rm.role_id and ur.user_id=u.id and u.username=#{username}
	)
  </select>
  
  <select id="findListByRoleId" parameterType="java.lang.Long" resultMap="BaseResultMap">
   select 
    <include refid="Base_Column_List" />
    from secu_menu m where exists(select 1 from secu_role_menu rm where rm.menu_id=m.id and rm.role_id=#{roleId})
  </select>
</mapper>